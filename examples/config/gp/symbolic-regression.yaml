# Configuration for a Genetic Programming experiment on a symbolic regression problem.

algorithm:
    # The name of the algorithm to use. 'gp' is our new implementation.
    name: gp
    # Number of best individuals to carry over to the next generation without changes.
    elitism: 2
    population:
        # The number of individuals in the population.
        size: 100
    selection:
        # The selection method. 'tournament' is a good general-purpose choice.
        name: tournament
        # The number of individuals participating in each tournament.
        size: 5
    termination:
        # The maximum number of generations to run the evolution for.
        max-generations: 50

problem:
    # The fully qualified class name of the problem (fitness function).
    # Note: This class is now in the 'examples' module.
    class: com.knezevic.edaf.examples.gp.problems.SymbolicRegressionProblem
    genotype:
        # The type of genotype. 'tree' corresponds to our new GP implementation.
        type: tree
        # A dummy value required by the framework's validator. Not used by the tree genotype.
        length: 1
        # The maximum depth of the trees generated during initialization.
        maxDepth: 7
        # The primitive set (functions and terminals) to build the trees with.
        primitives:
            # The type of primitive set to use. Supported: RealValued, Binary, Ant
            type: RealValued
            # A comma-separated list of function names from the specified set.
            functionSet: ADD,SUB,MUL,DIV
            # A list of terminals (variables and constants).
            terminals:
                # A variable terminal named 'x'. Its value will be provided by the problem.
                - { name: x, type: variable }
                # An ephemeral random constant. A new random value will be generated
                # for each instance of this terminal in the initial population.
                - { name: ERC, type: ephemeral, range: [-5.0, 5.0] }
        crossing:
            # The name for the crossover operator (for logging/display).
            name: treeCrossover
            # The probability of applying crossover to a pair of selected parents.
            probability: 0.8
        mutation:
            # The name for the mutation operator.
            name: treeMutation
            # The probability of applying mutation to an individual.
            probability: 0.15
