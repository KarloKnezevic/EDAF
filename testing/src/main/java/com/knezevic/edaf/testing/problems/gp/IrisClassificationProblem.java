package com.knezevic.edaf.testing.problems.gp;

import com.knezevic.edaf.core.impl.AbstractProblem;
import com.knezevic.edaf.genotype.tree.TreeIndividual;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Iris classification problem for Genetic Programming.
 * Uses the classic Iris dataset (4 features, 3 classes).
 * Features: sepal_length, sepal_width, petal_length, petal_width
 * Classes: Setosa (0), Versicolor (1), Virginica (2)
 */
public class IrisClassificationProblem extends AbstractProblem<TreeIndividual> {
    
    // Iris dataset: [sepal_length, sepal_width, petal_length, petal_width] -> class
    private static final double[][] IRIS_DATA = {
        // Setosa (class 0)
        {5.1, 3.5, 1.4, 0.2, 0.0},
        {4.9, 3.0, 1.4, 0.2, 0.0},
        {4.7, 3.2, 1.3, 0.2, 0.0},
        {4.6, 3.1, 1.5, 0.2, 0.0},
        {5.0, 3.6, 1.4, 0.2, 0.0},
        {5.4, 3.9, 1.7, 0.4, 0.0},
        {4.6, 3.4, 1.4, 0.3, 0.0},
        {5.0, 3.4, 1.5, 0.2, 0.0},
        {4.4, 2.9, 1.4, 0.2, 0.0},
        {4.9, 3.1, 1.5, 0.1, 0.0},
        {5.4, 3.7, 1.5, 0.2, 0.0},
        {4.8, 3.4, 1.6, 0.2, 0.0},
        {4.8, 3.0, 1.4, 0.1, 0.0},
        {4.3, 3.0, 1.1, 0.1, 0.0},
        {5.8, 4.0, 1.2, 0.2, 0.0},
        {5.7, 4.4, 1.5, 0.4, 0.0},
        {5.4, 3.9, 1.3, 0.4, 0.0},
        {5.1, 3.5, 1.4, 0.3, 0.0},
        {5.7, 3.8, 1.7, 0.3, 0.0},
        {5.1, 3.8, 1.5, 0.3, 0.0},
        {5.4, 3.4, 1.7, 0.2, 0.0},
        {5.1, 3.7, 1.5, 0.4, 0.0},
        {4.6, 3.6, 1.0, 0.2, 0.0},
        {5.1, 3.3, 1.7, 0.5, 0.0},
        {4.8, 3.4, 1.9, 0.2, 0.0},
        {5.0, 3.0, 1.6, 0.2, 0.0},
        {5.0, 3.4, 1.6, 0.4, 0.0},
        {5.2, 3.5, 1.5, 0.2, 0.0},
        {5.2, 3.4, 1.4, 0.2, 0.0},
        {4.7, 3.2, 1.6, 0.2, 0.0},
        {4.8, 3.1, 1.6, 0.2, 0.0},
        {5.4, 3.4, 1.5, 0.4, 0.0},
        {5.2, 4.1, 1.5, 0.1, 0.0},
        {5.5, 4.2, 1.4, 0.2, 0.0},
        {4.9, 3.1, 1.5, 0.2, 0.0},
        {5.0, 3.2, 1.2, 0.2, 0.0},
        {5.5, 3.5, 1.3, 0.2, 0.0},
        {4.9, 3.6, 1.4, 0.1, 0.0},
        {4.4, 3.0, 1.3, 0.2, 0.0},
        {5.1, 3.4, 1.5, 0.2, 0.0},
        {5.0, 3.5, 1.3, 0.3, 0.0},
        {4.5, 2.3, 1.3, 0.3, 0.0},
        {4.4, 3.2, 1.3, 0.2, 0.0},
        {5.0, 3.5, 1.6, 0.6, 0.0},
        {5.1, 3.8, 1.9, 0.4, 0.0},
        {4.8, 3.0, 1.4, 0.3, 0.0},
        {5.1, 3.8, 1.6, 0.2, 0.0},
        {4.6, 3.2, 1.4, 0.2, 0.0},
        {5.3, 3.7, 1.5, 0.2, 0.0},
        {5.0, 3.3, 1.4, 0.2, 0.0},
        // Versicolor (class 1)
        {7.0, 3.2, 4.7, 1.4, 1.0},
        {6.4, 3.2, 4.5, 1.5, 1.0},
        {6.9, 3.1, 4.9, 1.5, 1.0},
        {5.5, 2.3, 4.0, 1.3, 1.0},
        {6.5, 2.8, 4.6, 1.5, 1.0},
        {5.7, 2.8, 4.5, 1.3, 1.0},
        {6.3, 3.3, 4.7, 1.6, 1.0},
        {4.9, 2.4, 3.3, 1.0, 1.0},
        {6.6, 2.9, 4.6, 1.3, 1.0},
        {5.2, 2.7, 3.9, 1.4, 1.0},
        {5.0, 2.0, 3.5, 1.0, 1.0},
        {5.9, 3.0, 4.2, 1.5, 1.0},
        {6.0, 2.2, 4.0, 1.0, 1.0},
        {6.1, 2.9, 4.7, 1.4, 1.0},
        {5.6, 2.9, 3.6, 1.3, 1.0},
        {6.7, 3.1, 4.4, 1.4, 1.0},
        {5.6, 3.0, 4.5, 1.5, 1.0},
        {5.8, 2.7, 4.1, 1.0, 1.0},
        {6.2, 2.2, 4.5, 1.5, 1.0},
        {5.6, 2.5, 3.9, 1.1, 1.0},
        {5.9, 3.2, 4.8, 1.8, 1.0},
        {6.1, 2.8, 4.0, 1.3, 1.0},
        {6.3, 2.5, 4.9, 1.5, 1.0},
        {6.1, 2.8, 4.7, 1.2, 1.0},
        {6.4, 2.9, 4.3, 1.3, 1.0},
        {6.6, 3.0, 4.4, 1.4, 1.0},
        {6.8, 2.8, 4.8, 1.4, 1.0},
        {6.7, 3.0, 5.0, 1.7, 1.0},
        {6.0, 2.9, 4.5, 1.5, 1.0},
        {5.7, 2.6, 3.5, 1.0, 1.0},
        {5.5, 2.4, 3.8, 1.1, 1.0},
        {5.5, 2.4, 3.7, 1.0, 1.0},
        {5.8, 2.7, 3.9, 1.2, 1.0},
        {6.0, 2.7, 5.1, 1.6, 1.0},
        {5.4, 3.0, 4.5, 1.5, 1.0},
        {6.0, 3.4, 4.5, 1.6, 1.0},
        {6.7, 3.1, 4.7, 1.5, 1.0},
        {6.3, 2.3, 4.4, 1.3, 1.0},
        {5.6, 3.0, 4.1, 1.3, 1.0},
        {5.5, 2.5, 4.0, 1.3, 1.0},
        {5.5, 2.6, 4.4, 1.2, 1.0},
        {6.1, 3.0, 4.6, 1.4, 1.0},
        {5.8, 2.6, 4.0, 1.2, 1.0},
        {5.0, 2.3, 3.3, 1.0, 1.0},
        {5.6, 2.7, 4.2, 1.3, 1.0},
        {5.7, 3.0, 4.2, 1.2, 1.0},
        {5.7, 2.9, 4.2, 1.3, 1.0},
        {6.2, 2.9, 4.3, 1.3, 1.0},
        {5.1, 2.5, 3.0, 1.1, 1.0},
        {5.7, 2.8, 4.1, 1.3, 1.0},
        // Virginica (class 2)
        {6.3, 3.3, 6.0, 2.5, 2.0},
        {5.8, 2.7, 5.1, 1.9, 2.0},
        {7.1, 3.0, 5.9, 2.1, 2.0},
        {6.3, 2.9, 5.6, 1.8, 2.0},
        {6.5, 3.0, 5.8, 2.2, 2.0},
        {7.6, 3.0, 6.6, 2.1, 2.0},
        {4.9, 2.5, 4.5, 1.7, 2.0},
        {7.3, 2.9, 6.3, 1.8, 2.0},
        {6.7, 2.5, 5.8, 1.8, 2.0},
        {7.2, 3.6, 6.1, 2.5, 2.0},
        {6.5, 3.2, 5.1, 2.0, 2.0},
        {6.4, 2.7, 5.3, 1.9, 2.0},
        {6.8, 3.0, 5.5, 2.1, 2.0},
        {5.7, 2.5, 5.0, 2.0, 2.0},
        {5.8, 2.8, 5.1, 2.4, 2.0},
        {6.4, 3.2, 5.3, 2.3, 2.0},
        {6.5, 3.0, 5.5, 1.8, 2.0},
        {7.7, 3.8, 6.7, 2.2, 2.0},
        {7.7, 2.6, 6.9, 2.3, 2.0},
        {6.0, 2.2, 5.0, 1.5, 2.0},
        {6.9, 3.2, 5.7, 2.3, 2.0},
        {5.6, 2.8, 4.9, 2.0, 2.0},
        {7.7, 2.8, 6.7, 2.0, 2.0},
        {6.3, 2.7, 4.9, 1.8, 2.0},
        {6.7, 3.3, 5.7, 2.1, 2.0},
        {7.2, 3.2, 6.0, 1.8, 2.0},
        {6.2, 2.8, 4.8, 1.8, 2.0},
        {6.1, 3.0, 4.9, 1.8, 2.0},
        {6.4, 2.8, 5.6, 2.1, 2.0},
        {7.2, 3.0, 5.8, 1.6, 2.0},
        {7.4, 2.8, 6.1, 1.9, 2.0},
        {7.9, 3.8, 6.4, 2.0, 2.0},
        {6.4, 2.8, 5.6, 2.2, 2.0},
        {6.3, 2.8, 5.1, 1.5, 2.0},
        {6.1, 2.6, 5.6, 1.4, 2.0},
        {7.7, 3.0, 6.1, 2.3, 2.0},
        {6.3, 3.4, 5.6, 2.4, 2.0},
        {6.4, 3.1, 5.5, 1.8, 2.0},
        {6.0, 3.0, 4.8, 1.8, 2.0},
        {6.9, 3.1, 5.4, 2.1, 2.0},
        {6.7, 3.1, 5.6, 2.4, 2.0},
        {6.9, 3.1, 5.1, 2.3, 2.0},
        {5.8, 2.7, 5.1, 1.9, 2.0},
        {6.8, 3.2, 5.9, 2.3, 2.0},
        {6.7, 3.3, 5.7, 2.5, 2.0},
        {6.7, 3.0, 5.2, 2.3, 2.0},
        {6.3, 2.5, 5.0, 1.9, 2.0},
        {6.5, 3.0, 5.2, 2.0, 2.0},
        {6.2, 3.4, 5.4, 2.3, 2.0},
        {5.9, 3.0, 5.1, 1.8, 2.0}
    };
    
    private final List<double[]> trainingData;
    
    public IrisClassificationProblem(Map<String, Object> params) {
        super(params);
        this.trainingData = new ArrayList<>();
        // Copy all iris data to training set
        for (double[] sample : IRIS_DATA) {
            trainingData.add(sample);
        }
    }
    
    @Override
    public void evaluate(TreeIndividual individual) {
        int correct = 0;
        int total = trainingData.size();
        
        for (double[] sample : trainingData) {
            Map<String, Double> terminals = new HashMap<>();
            terminals.put("sepal_length", sample[0]);
            terminals.put("sepal_width", sample[1]);
            terminals.put("petal_length", sample[2]);
            terminals.put("petal_width", sample[3]);
            
            double expectedClass = sample[4];
            double actualOutput = individual.getGenotype().evaluate(terminals);
            
            // Convert continuous output to class prediction:
            // output < 0.5 -> class 0, 0.5-1.5 -> class 1, >= 1.5 -> class 2
            double predictedClass;
            if (actualOutput < 0.5) {
                predictedClass = 0.0;
            } else if (actualOutput < 1.5) {
                predictedClass = 1.0;
            } else {
                predictedClass = 2.0;
            }
            
            // Check if prediction is correct (within tolerance)
            if (Math.abs(predictedClass - expectedClass) < 0.1) {
                correct++;
            }
        }
        
        // Fitness = number of incorrect classifications (minimize)
        individual.setFitness(total - correct);
    }
}

